name: Deploy to GitHub Pages

# Trigger the workflow on push to main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Allow manual workflow dispatch
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Install dependencies if package.json exists
      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              echo "Installing dependencies with npm ci..."
              npm ci
            else
              echo "Installing dependencies with npm install..."
              npm install
            fi
          else
            echo "No package.json found, skipping npm install"
          fi

      # Type check TypeScript if tsconfig.json exists
      - name: TypeScript type check
        run: |
          if [ -f tsconfig.json ]; then
            echo "Running TypeScript type check..."
            # Use npx to run tsc without global install
            npx tsc --noEmit
            echo "TypeScript type check completed"
          else
            echo "No tsconfig.json found, skipping TypeScript check"
          fi

      # Prepare files for deployment
      - name: Prepare deployment files
        run: |
          # Create deployment directory
          mkdir -p ./dist
          
          # Copy all HTML files (now at root level)
          if [ -f "./index.html" ]; then
            cp ./index.html ./dist/
            echo "Copied index.html"
          fi
          if [ -f "./blog.html" ]; then
            cp ./blog.html ./dist/
            echo "Copied blog.html"
          fi
          if [ -f "./categories.html" ]; then
            cp ./categories.html ./dist/
            echo "Copied categories.html"
          fi
          if [ -f "./tags.html" ]; then
            cp ./tags.html ./dist/
            echo "Copied tags.html"
          fi
          if [ -f "./network.html" ]; then
            cp ./network.html ./dist/
            echo "Copied network.html"
          fi
          if [ -f "./about.html" ]; then
            cp ./about.html ./dist/
            echo "Copied about.html"
          fi
          
          # Copy source files
          if [ -d "./src" ]; then
            cp -r ./src ./dist/
            echo "Copied source files"
          fi
          
          # Copy public assets (favicon, etc.)
          if [ -d "./public" ]; then
            cp -r ./public ./dist/
            echo "Copied public files"
          fi
          
          # Copy other necessary files
          if [ -f tsconfig.json ]; then
            cp tsconfig.json ./dist/
          fi
          
          # List contents for debugging
          echo "Deployment directory contents:"
          ls -la ./dist/
          echo "Source files:"
          ls -la ./dist/src/ || echo "No src directory"
          
          echo "Files prepared for deployment"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Optional: Lighthouse CI for performance monitoring
  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 60

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy.outputs.page_url }}
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true 